// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.

import * as path from 'path';
import type {
  IHeftTaskPlugin,
  IHeftTaskRunHookOptions,
  HeftTaskSession,
  HeftConfiguration
} from '@rushstack/heft';
import { ConfigurationFile } from '@rushstack/heft-config-file';
import type { ITerminal } from '@rushstack/node-core-library';

import { ApiExtractorRunner } from './ApiExtractorRunner';

const PLUGIN_NAME: string = 'ApiExtractorPlugin';
const PLUGIN_SCHEMA_PATH: string = path.resolve(__dirname, 'schemas', 'api-extractor-task.schema.json');
const CONFIG_FILE_LOCATION: string = './config/api-extractor.json';

export interface IApiExtractorPluginConfiguration {
  /**
   * If set to true, use the project's TypeScript compiler version for API Extractor's
   * analysis. API Extractor's included TypeScript compiler can generally correctly
   * analyze typings generated by older compilers, and referencing the project's compiler
   * can cause issues. If issues are encountered with API Extractor's included compiler,
   * set this option to true.
   *
   * This corresponds to API Extractor's `--typescript-compiler-folder` CLI option and
   * `IExtractorInvokeOptions.typescriptCompilerFolder` API option. This option defaults to false.
   */
  useProjectTypescriptVersion?: boolean;
}

export class ApiExtractorPlugin implements IHeftTaskPlugin {
  private _apiExtractorConfigurationFileLoader:
    | ConfigurationFile<IApiExtractorPluginConfiguration>
    | undefined;

  public apply(taskSession: HeftTaskSession, heftConfiguration: HeftConfiguration): void {
    taskSession.hooks.run.tapPromise(PLUGIN_NAME, async (runOptions: IHeftTaskRunHookOptions) => {
      // API Extractor provides an ExtractorConfig.tryLoadForFolder() API that will probe for api-extractor.json
      // including support for rig.json.  However, Heft does not load the @microsoft/api-extractor package at all
      // unless it sees a config/api-extractor.json file.  Thus we need to do our own lookup here.
      const apiExtractorJsonFilePath: string | undefined =
        await heftConfiguration.rigConfig.tryResolveConfigFilePathAsync(CONFIG_FILE_LOCATION);

      if (apiExtractorJsonFilePath !== undefined) {
        await this._runApiExtractorAsync(
          taskSession,
          heftConfiguration,
          runOptions,
          apiExtractorJsonFilePath
        );
      }
    });
  }

  private async _runApiExtractorAsync(
    taskSession: HeftTaskSession,
    heftConfiguration: HeftConfiguration,
    runOptions: IHeftTaskRunHookOptions,
    apiExtractorJsonFilePath: string
  ): Promise<void> {
    const apiExtractorTaskConfiguration: IApiExtractorPluginConfiguration | undefined =
      await this._loadApiExtractorConfigurationAsync(heftConfiguration, taskSession.logger.terminal);

    // TODO: Handle watch mode
    // if (watchMode) {
    //   taskSession.logger.terminal.writeWarningLine("API Extractor isn't currently supported in --watch mode.");
    //   return;
    // }

    const apiExtractorPackagePath: string = await heftConfiguration.rigToolResolver.resolvePackageAsync(
      '@microsoft/api-extractor',
      taskSession.logger.terminal
    );
    let typescriptPackagePath: string | undefined = undefined;
    if (apiExtractorTaskConfiguration?.useProjectTypescriptVersion) {
      typescriptPackagePath = await heftConfiguration.rigToolResolver.resolvePackageAsync(
        'typescript',
        taskSession.logger.terminal
      );
    }

    const apiExtractorRunner: ApiExtractorRunner = new ApiExtractorRunner({
      apiExtractorJsonFilePath,
      apiExtractorPackagePath,
      typescriptPackagePath,
      buildFolder: heftConfiguration.buildFolder,
      production: runOptions.production,
      scopedLogger: taskSession.logger
    });

    // Run API Extractor
    await apiExtractorRunner.invokeAsync();
  }

  private async _loadApiExtractorConfigurationAsync(
    heftConfiguration: HeftConfiguration,
    terminal: ITerminal
  ): Promise<IApiExtractorPluginConfiguration | undefined> {
    if (!this._apiExtractorConfigurationFileLoader) {
      this._apiExtractorConfigurationFileLoader = new ConfigurationFile<IApiExtractorPluginConfiguration>({
        projectRelativeFilePath: 'config/api-extractor-task.json',
        jsonSchemaPath: PLUGIN_SCHEMA_PATH
      });
    }

    return await this._apiExtractorConfigurationFileLoader.tryLoadConfigurationFileForProjectAsync(
      terminal,
      heftConfiguration.buildFolder,
      heftConfiguration.rigConfig
    );
  }
}

export default new ApiExtractorPlugin();
